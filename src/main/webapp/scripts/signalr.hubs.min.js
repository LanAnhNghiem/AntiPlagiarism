/*!
 * ASP.NET SignalR JavaScript Library v2.2.2
 * http://signalr.net/
 *
 * Copyright (c) .NET Foundation. All rights reserved.
 * Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
 *
 */

/// <reference path="..\..\SignalR.Client.JS\Scripts\jquery-1.6.4.js" />
/// <reference path="jquery.signalR.js" />
(function ($, window, undefined) {
    /// <param name="$" type="jQuery" />
    "use strict";

    if (typeof ($.signalR) !== "function") {
        throw new Error("SignalR: SignalR is not loaded. Please ensure jquery.signalR-x.js is referenced before ~/signalr/js.");
    }

    var signalR = $.signalR;

    function makeProxyCallback(hub, callback) {
        return function () {
            // Call the client hub method
            callback.apply(hub, $.makeArray(arguments));
        };
    }

    function registerHubProxies(instance, shouldSubscribe) {
        var key, hub, memberKey, memberValue, subscriptionMethod;

        for (key in instance) {
            if (instance.hasOwnProperty(key)) {
                hub = instance[key];

                if (!(hub.hubName)) {
                    // Not a client hub
                    continue;
                }

                if (shouldSubscribe) {
                    // We want to subscribe to the hub events
                    subscriptionMethod = hub.on;
                } else {
                    // We want to unsubscribe from the hub events
                    subscriptionMethod = hub.off;
                }

                // Loop through all members on the hub and find client hub functions to subscribe/unsubscribe
                for (memberKey in hub.client) {
                    if (hub.client.hasOwnProperty(memberKey)) {
                        memberValue = hub.client[memberKey];

                        if (!$.isFunction(memberValue)) {
                            // Not a client hub function
                            continue;
                        }

                        subscriptionMethod.call(hub, memberKey, makeProxyCallback(hub, memberValue));
                    }
                }
            }
        }
    }

    $.hubConnection.prototype.createHubProxies = function () {
        var proxies = {};
        this.starting(function () {
            // Register the hub proxies as subscribed
            // (instance, shouldSubscribe)
            registerHubProxies(proxies, true);

            this._registerSubscribedHubs();
        }).disconnected(function () {
            // Unsubscribe all hub proxies when we "disconnect".  This is to ensure that we do not re-add functional call backs.
            // (instance, shouldSubscribe)
            registerHubProxies(proxies, false);
        });

        proxies['academicHub'] = this.createHubProxy('academicHub');
        proxies['academicHub'].client = {};
        proxies['academicHub'].server = {
            askForRecommendedPrice: function (pid, message) {
                return proxies['academicHub'].invoke.apply(proxies['academicHub'], $.merge(["AskForRecommendedPrice"], $.makeArray(arguments)));
            },

            getResults: function (pid) {
                return proxies['academicHub'].invoke.apply(proxies['academicHub'], $.merge(["GetResults"], $.makeArray(arguments)));
            },

            subscribeProcess: function (pid) {
                return proxies['academicHub'].invoke.apply(proxies['academicHub'], $.merge(["SubscribeProcess"], $.makeArray(arguments)));
            },

            subscribeUser: function () {
                return proxies['academicHub'].invoke.apply(proxies['academicHub'], $.merge(["SubscribeUser"], $.makeArray(arguments)));
            },

            updateProgress: function (pid) {
                return proxies['academicHub'].invoke.apply(proxies['academicHub'], $.merge(["UpdateProgress"], $.makeArray(arguments)));
            }
        };

        proxies['businessesHub'] = this.createHubProxy('businessesHub');
        proxies['businessesHub'].client = {};
        proxies['businessesHub'].server = {
            getResults: function (pid) {
                return proxies['businessesHub'].invoke.apply(proxies['businessesHub'], $.merge(["GetResults"], $.makeArray(arguments)));
            },

            subscribeProcess: function (pid) {
                return proxies['businessesHub'].invoke.apply(proxies['businessesHub'], $.merge(["SubscribeProcess"], $.makeArray(arguments)));
            },

            subscribeUser: function () {
                return proxies['businessesHub'].invoke.apply(proxies['businessesHub'], $.merge(["SubscribeUser"], $.makeArray(arguments)));
            },

            updateProgress: function (pid) {
                return proxies['businessesHub'].invoke.apply(proxies['businessesHub'], $.merge(["UpdateProgress"], $.makeArray(arguments)));
            }
        };

        proxies['compareHubV2'] = this.createHubProxy('compareHubV2');
        proxies['compareHubV2'].client = {};
        proxies['compareHubV2'].server = {
            compare: function (cid) {
                return proxies['compareHubV2'].invoke.apply(proxies['compareHubV2'], $.merge(["Compare"], $.makeArray(arguments)));
            },

            createCompersion: function (captcha, source_mode, suspected_mode, raw_source_url, raw_suspected_url) {
                return proxies['compareHubV2'].invoke.apply(proxies['compareHubV2'], $.merge(["CreateCompersion"], $.makeArray(arguments)));
            },

            getCallerConnectionId: function () {
                return proxies['compareHubV2'].invoke.apply(proxies['compareHubV2'], $.merge(["GetCallerConnectionId"], $.makeArray(arguments)));
            },

            getPage: function (cid, fileNum, pageNum, changeTab, focusOn) {
                return proxies['compareHubV2'].invoke.apply(proxies['compareHubV2'], $.merge(["GetPage"], $.makeArray(arguments)));
            },

            locateMatch: function (cid, fileNum, start_pos) {
                return proxies['compareHubV2'].invoke.apply(proxies['compareHubV2'], $.merge(["LocateMatch"], $.makeArray(arguments)));
            },

            registerComparisonId: function () {
                return proxies['compareHubV2'].invoke.apply(proxies['compareHubV2'], $.merge(["RegisterComparisonId"], $.makeArray(arguments)));
            },

            setupComparison: function (cid) {
                return proxies['compareHubV2'].invoke.apply(proxies['compareHubV2'], $.merge(["SetupComparison"], $.makeArray(arguments)));
            },

            uploadText: function (cid, text, fileNum) {
                return proxies['compareHubV2'].invoke.apply(proxies['compareHubV2'], $.merge(["UploadText"], $.makeArray(arguments)));
            },

            uploadUrl: function (cid, url, fileNum) {
                return proxies['compareHubV2'].invoke.apply(proxies['compareHubV2'], $.merge(["UploadUrl"], $.makeArray(arguments)));
            }
        };

        proxies['compareResultHub'] = this.createHubProxy('compareResultHub');
        proxies['compareResultHub'].client = {};
        proxies['compareResultHub'].server = {
            getPage: function (pid, rid, fileNum, pageNum, changeTab, focusOn) {
                return proxies['compareResultHub'].invoke.apply(proxies['compareResultHub'], $.merge(["GetPage"], $.makeArray(arguments)));
            },

            locateMatch: function (pid, rid, fileNum, start_pos) {
                return proxies['compareResultHub'].invoke.apply(proxies['compareResultHub'], $.merge(["LocateMatch"], $.makeArray(arguments)));
            },

            setupComparison: function (pid, rid) {
                return proxies['compareResultHub'].invoke.apply(proxies['compareResultHub'], $.merge(["SetupComparison"], $.makeArray(arguments)));
            }
        };

        proxies['documentConverterHub'] = this.createHubProxy('documentConverterHub');
        proxies['documentConverterHub'].client = {};
        proxies['documentConverterHub'].server = {
            registerForCallback: function (url) {
                return proxies['documentConverterHub'].invoke.apply(proxies['documentConverterHub'], $.merge(["RegisterForCallback"], $.makeArray(arguments)));
            }
        };

        proxies['importUsersHub'] = this.createHubProxy('importUsersHub');
        proxies['importUsersHub'].client = {};
        proxies['importUsersHub'].server = {
            startImportUsers: function (facultyId, emails) {
                return proxies['importUsersHub'].invoke.apply(proxies['importUsersHub'], $.merge(["StartImportUsers"], $.makeArray(arguments)));
            }
        };

        proxies['statisticsHub'] = this.createHubProxy('statisticsHub');
        proxies['statisticsHub'].client = {};
        proxies['statisticsHub'].server = {
            getStatitics: function () {
                return proxies['statisticsHub'].invoke.apply(proxies['statisticsHub'], $.merge(["GetStatitics"], $.makeArray(arguments)));
            }
        };

        return proxies;
    };

    signalR.hub = $.hubConnection("/signalr", { useDefaultPath: false });
    $.extend(signalR, signalR.hub.createHubProxies());

}(window.jQuery, window));